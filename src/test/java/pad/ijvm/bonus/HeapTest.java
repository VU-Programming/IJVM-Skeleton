package pad.ijvm.bonus;

import org.junit.Test;
import pad.ijvm.MachineFactory;
import pad.ijvm.interfaces.IJVMInterface;

import java.io.*;
import java.util.HashSet;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;

/**
 * Created by Arthur de Fluiter
 * <p>
 * The glorious tests for heap operations, featuring a full implementation of brainfuck in... you guessed it: IJVM
 * assembly. (therefore also proving turing completeness of the language)
 */
public class HeapTest {
    private IJVMInterface vm;
    private ByteArrayOutputStream vmOutput;
    private HashSet<Integer> arrays;   // keeping track of refs

    private final static byte NEWARRAY = (byte) 0xd1;
    private final static byte IALOAD = (byte) 0xd2;
    private final static byte IASTORE = (byte) 0xd3;


    private void newMachine(String file, String input) {
        try {
            vm = MachineFactory.createIJVMInstance(new File("./files/bonus/" + file));
        } catch (IOException e) {
            e.printStackTrace();
        }

        /* creating IO streams */
        ByteArrayInputStream rawInput = new ByteArrayInputStream(input.getBytes());
        vmOutput = new ByteArrayOutputStream();

        vm.setOutput(new PrintStream(vmOutput));
        vm.setInput(rawInput);

        arrays = new HashSet<>();
    }

    /* created to detects whether at times same array ref is being given twice */
    private void run() {
        int oldProgramCounter = -1;

        // while it's still going, and has an instruction to check
        while (oldProgramCounter != vm.getProgramCounter() && vm.getProgramCounter() < vm.getText().length) {
            oldProgramCounter = vm.getProgramCounter();

            // every NEWARRAY needs to return a fresh reference
            if (vm.getInstruction() == NEWARRAY) {
                vm.step();

                int arrayRef = vm.topOfStack();
                assertFalse(arrays.contains(arrayRef));
                arrays.add(arrayRef);
            } else {
                vm.step();
            }
        }
    }

    /**
     * Before doing anything exciting, we'll first run a basic test
     */
    @Test(timeout = 1000)
    public void basicTest() {
        newMachine("simpleHeap.ijvm", "");

        /* run the entire program while checking for NEWARRAY uniqueness */
        run();

        /* let's see what we found */
        assertEquals("0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ", vmOutput.toString());
    }

    /*
     * 888      .d888d8b
     * 888     d88P" Y8P
     * 888     888
     * 88888b. 888888888
     * 888 "88b888   888
     * 888  888888   888
     * 888 d88P888   888
     * 88888P" 888   888
     *
     * Welcome to the brainfuck interpreter tests, if you aren't familiar with brainfuck:
     * https://en.wikipedia.org/wiki/Brainfuck
     *
     * The language has only 8 operators, namely "+-<>,.[]". It assumes we have an infinite amount of 8-bits memory,
     * We start at some memory position.
     *
     * + and - increase/decrease the value of that position, similarly to BIPUSH 1, IADD
     * < and > move the memory pointer to the left and right
     * , stores a value from STDIN to the current memory, similarly to IN
     * . outputs the value at the current memory location to STDOUT, similarly to OUT
     * [ code ] is a loop construct, if the memory location is non-zero when ] is reached, it jumps back to the [
     * any other symbol is ignored.
     *
     * NOTE: since IJVM doesn't support files and we need to provide both the brainfuck program and input we use this
     * <brainfuck program> ':' <brainfuck input>
     */
    @Test(timeout = 1000)
    public void testSimple() {
        newMachine("bfi.ijvm", ",.:a");

        run();
        assertEquals("a", vmOutput.toString());
    }

    @Test(timeout = 1000)
    public void testHelloWorld() {
        newMachine("bfi.ijvm", "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++.." +
                "+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.");

        vm.run();
        assertEquals("Hello World!\n", vmOutput.toString());
    }

    @Test(timeout=1000)
    public void testDank() {
        String program =
                ";[;;;;;;;;;;;;;;;;;;;;;;;-]@@@@@@@@@@@>;;;;;;;;;;;;;;;;;;;;;;;;;" +
                "/;;;;;;;;;;;;;;;;;;;;;;;;[-]@@@@@@@@@@<>;;;;;;;;;;/////`````````" +
                "`/;;;;;;;;;;;;;;;;;;;;;;++++++++[@@@@@@@<;;;;;;;;;;/////````````" +
                "``;;;;;;;;;;;;;;;;;;;;++++++++@@@@@@@@@@@>;;;;;;;;;/////````````" +
                "``/;;;;;;;;;;;;;;;;;;;-]@@@@@@@@@@@@@@@@@@@<;;;;;;;;////````````" +
                "/;;++@.>;;;;;;;;;;;;;+++++++[@@@@@@@@@@@@@@<;;;;;;;;;////```````" +
                "+++++++@@>;;;;;;;;;;;-]@@@@@@@@@<;;;-.@@@@@@>;;;;;;;;////```````" +
                "++++[@@@@@@<;;;;;;;;----@@@@@@@>;;;;;;;-]@@@@@<;;;;;;////```````" +
                "-@@@@@@@@@@@.>;;;;;;+++[@@@@<;;;;;;;;;;;;;+++@@>;;;;;;////`////`" +
                "-]@@@@@@@@@@@<;;;;;-@@.>;;;;;;;;;;;;//;;;;;;;++;;;;;;;//////////" +
                "[@@@@@@@@@@@@@@<;;++@@>;;;;;;;;;///////;;;;;;;;;;;;;;;;/////////" +
                "-]@@@@@@@@@@@@@@@@@@@@<;;;;///////////;;;;;;;;;;;;;;;;;/////////" +
                "+@@@@@@@@@@@@@@@@@@@@@.>;;;;////////;;;;/////;;;;+;;;;;/////////" +
                "++[@@@@@@@@@@@@@@@@<;;;;;;;;;/////;;;;;;//////;;;;-;;;;;;;//;;;/" +
                "--@@@@@@@@@@@@@@@@@@@@@@@>;;;;;;;;;;;;;;;;;;;;;;-]@@@@<;;;;;;;;;" +
                "+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@." +
                "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>" +
                "++++;;;[@<;;++++@@@@@@@@@@@@@@>;;;;-]<;;-@.>;++++[@@@@@@@@@@@@@<" +
                "---->//;;;//;-]@@@@@@@@@@@@@@@<///;--.>/;;;;/;+++[@@@@@@@@@@@@@<" +
                "+++@@>;;;;;;;;;-]@@@@@@@@@@@@@<///;-@.>;;;;;;;;;+++++[@@@@@@@<;;" +
                "-----@@>/;;;//;-]@@@@@@@@@@@@@<;//;++@@@.>;;;//;++++[@@@@@@@<;;/" +
                "++++@@@>/;;;//;;-]@@@@@@@@@@@@<;//;+@@@@.>;;;//;;++++[@@@@@@<;//" +
                "++++@@@@@>//;;;//-]@@@@@@@@<;;;;///;;--@@@.//;;;//+@@@@@@@.;;///" +
                "@@@@@@@@@;//@@;//@@@@@@@@@@;;;;/////;@@@@@;;/;@;//@@@@@@@@;;////" +
                "@@@@@@@@@@;;@@@;;@@@@@@@@;;;;;;///`//;;;@@@;;@@@;;@@@@@@@;;;////" +
                "@@@@@@@@@@@@@@@@@@@@@@@@@;;;;;;///``///;@@@@@@@@@@@@@@@@@;;;////" +
                "@@@@@@;@@@@@@@@@@@@@@@@@@;;;;;;/////////@@@@@@@@@@@@@@@@;;;;////" +
                "@@@@@@;;;;;;;;;;;;;;;;;;;;;;;;;;;/////////////////////;;;;;;////" +
                "@@@@@;;;;;;;;;;;;;;;;;;;;;;;;@@;;/;;;//////////////////;;;//////" +
                "@@@@@;;;;;;;;;;;/////////;;;;@@;;;;;;;////////////````/;;///////" +
                "@@@@@;;;;;;;;;;//////////;;;;;;;;;///////////////``````/;///////" +
                "@@@@@;;;;;;;;;;;/////////;;;;;;;;/////////////``/``````/////`///" +
                "@@@@@;;;;;;;;;;///////////;;;;;//////////////``````````///`/////" +
                "@@@@@;;;;;;;;;;///////////;;;;////////////`//```````````////////" +
                "@@@@@;;;;;;;;;///////////;;;;;;;;;;;/////////`/````````/////////" +
                "@@@;@@;;;;;;;;;//////////;;;;;;;;;;;;;//////////////////////////" +
                "@@;;@@;;;;;;;;;//////////;;;;;;;;;;;/////////////////////////;;;" +
                "@@@;;;;;;;;;;;;;////////;;;;;;;;;;//////////////////////;;;;;;;;" +
                "@@@;;;;;;;;;;;;;;///////;;;;;;;;////////;;;/////////////;;;;;;;;" +
                "@@@;;;;;;;;;;;;;;;//////;;;;;;;;;;/////////;////////////;;;;;;;;" +
                "@@@@;;;;;;;;;;;;;///////;;;;;;;;;;;;;//////;;///////////;@;;;;;;" +
                "@@@@;;;;;;;;;;;;;;;/////;;;;;;;;;;;;;;//////;///////////;@;;;;;;" +
                "@@@@@;;;;;;;;;;;;;;;/////;;;;;;;;;;;;;//////////////////;@;;;;;;" +
                "@@@@@@;;;;;;;;;;;;;;;////;;;;;;/////////////////////////;@;;;;;;" +
                "@@@@@@;;;;;;;;;;;;;;;;///;;;;;;/////////////////////////@@;;;;;;" +
                "@@@@@@;;;;;;;;;;;;;;;;//;;;;;;;/////////////////////////@@;;;;;;" +
                "@@@@@@;;;;;;;;;;;;;;;;;;;;;;;;;////////////////////////;@;;;;;;;" +
                "@@@@@@;;;;;;;;;;;;;;;;;;;;;;;;;////////////////////////;@;;;;;;;" +
                "@@@@@@;;;;;;;;;;;;;;;;;;;;;;;;;;;//////////////////////;@;;;;;;;" +
                "@@@@@@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;///////////////////;@@;;;;;;;" +
                "@@@@@@@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;/;;///////////////;@@;;;;;;;" +
                "@@@@@@@;;;;;;;;;;;;/```;```;````;```;```//```////////;;@;;;;;;;;" +
                "@@@@@@@;;;;;;;;;;;;/```;```;``//;```;```//``/////////;@@;;;;;;;;" +
                "@@@@@@@@;;;;;;;;;;;/```/```;``;;;```;```//``/////////;@@;;;;;;;;" +
                "@@@@@@@@@;;;;;;;;;;/```/```;``//;```/```//``/;//////;;@@;;;;;;;;" +
                "@@@@@@@@@;;;;;;;;;;/`/``/``;````;`````/`;/```;/////;;@@;;;;;;;;;" +
                "@@@@@@@@@@;;;;;;;;;/`/``;``@``;;;``/````;/``;/////;;;@@;;;;;;;;;" +
                "@@@@@@@@@@@;;;;;;;;/`/``;``;``;;;``;````;/``/////;;;@@;;;;;;;;;;" +
                "@@@@@@@@@@@;;;;;;;;/`/``;``@````;``;`/``;/```/;;;;;;@@;;;;;;;;;;" +
                "@@@@@@@@@@@@@;;;;;;/`//`;``;````;``;`/``;/```//;;;;@@;;;;;;;;;;;" +
                "@@@@@@@@@@@@@@@;;;;;@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;@@@;;;;;;;;;;;" +
                "@@@@@@@@@@@@@@@@@@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;@@@;;;;;;;;;;;;" +
                "@@@@@@@@@@@@@@@@@@@@@;;;;;;;;;;;;;;;;;;;;;;;;;;;;@@;;;;;;;;;;;;;" +
                "@@@@@@@@@@@@@@@@@@@@@@@@@;;;;;;;;;;;;;;;;;;;;;;@@@@;;;;;;;;;;;;;";

        newMachine("bfi.ijvm", program);
        vm.run();
        assertEquals("BrainfuckTest", vmOutput.toString());
    }

    @Test(timeout=1000)
    public void testIlluminati() {
        String program =
                "````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````" +
                "`````````````````````````````````````````````````````````````````/``````````````````````````````````````````````````````````````" +
                "````````````````````````````````````````````````````````````````/[``````````````````````````````````````````````````````````````" +
                "```````````````````````````````````````````````````````````````/-]>`````````````````````````````````````````````````````````````" +
                "```````````````````````````````````````````````````````````````/[-/`````````````````````````````````````````````````````````````" +
                "``````````````````````````````````````````````````````````````;]@@@<````````````````````````````````````````````````````````````" +
                "``````````````````````````````````````````````````````````````>++++;````````````````````````````````````````````````````````````" +
                "`````````````````````````````````````````````````````````````/++/;++;```````````````````````````````````````````````````````````" +
                "````````````````````````````````````````````````````````````//+[@@@@</``````````````````````````````````````````````````````````" +
                "````````````````````````````````````````````````````````````;;+++++++/``````````````````````````````````````````````````````````" +
                "```````````````````````````````````````````````````````````;;;;//;/++@>`````````````````````````````````````````````````````````" +
                "``````````````````````````````````````````````````````````//-;;;;;]@@@<`````````````````````````````````````````````````````````" +
                "``````````````````````````````````````````````````````````/----@@@@@@@@.````````````````````````````````````````````````````````" +
                "`````````````````````````````````````````````````````````>++++++[@@@@@@<````````````````````````````````````````````````````````" +
                "`````````````````````````````````````````````````````````;+;;;;/;/;;;;++/```````````````````````````````````````````````````````" +
                "````````````````````````````````````````````````````````/+;;;;;;;;/;;;++>```````````````````````````````````````````````````````" +
                "```````````````````````````````````````````````````````/-]@<;;--@@@@@@@@@.``````````````````````````````````````````````````````" +
                "```````````````````````````````````````````````````````>++++[@@@@@@@@@@@@</`````````````````````````````````````````````````````" +
                "``````````````````````````````````````````````````````;----@@>;;;;;;-]@@@</`````````````````````````````````````````````````````" +
                "`````````````````````````````````````````````````````/++@.>;;;;;;;;;;;;;/++/````````````````````````````````````````````````````" +
                "`````````````````````````````````````````````````````;++/;;;;;;;//;;;;/;;[@<````````````````````````````````````````````````````" +
                "````````````````````````````````````````````````````/++;;;;;/;;++@@>;//;-]<;/```````````````````````````````````````````````````" +
                "```````````````````````````````````````````````````/;+@@@@@@@@@@@@@@@@@@@@@@.```````````````````````````````````````````````````" +
                "```````````````````````````````````````````````````>+++++[@@@@@@<;;;-----@@@@>``````````````````````````````````````````````````" +
                "``````````````````````````````````````````````````/-]@</;//;;/;;/;;;;;;/;;;;;;``````````````````````````````````````````````````" +
                "``````````````````````````````````````````````````;-;;;;;;///;;/;;;;;;;;;;;;/;/`````````````````````````````````````````````````" +
                "`````````````````````````````````````````````````/--/;;;;;;;/;;/;;//;/;;;;;;;-;/````````````````````````````````````````````````" +
                "````````````````````````````````````````````````/-@@.>;/;;/;;++/;;/;+//;;;///+[<````````````````````````````````````````````````" +
                "````````````````````````````````````````````````++++@@@@@@>;-]@<;/;+@.>;++;;/++;/```````````````````````````````````````````````" +
                "```````````````````````````````````````````````;[@@@@</++;/;;;;;/;/////;;;;;/++>;```````````````````````````````````````````````" +
                "``````````````````````````````````````````````/-]@<///;;/;;;;///;;;;/;;/;/;;--@@.;``````````````````````````````````````````````" +
                "``````````````````````````````````````````````/+@.;/;;;;;;;;;;;;;//;-.;;/;;/@@@@;/``````````````````````````````````````````````" +
                "`````````````````````````````````````````````/@@@//;/;;/;;;;/;/;;;;/;@;;;;;;;;;@@/;`````````````````````````````````````````````" +
                "`````````````````````````````````````````````;@@@@@@@@@@@@@@@@@@@@;/;@@@;;;;;/;;@@;`````````````````````````````````````````````" +
                "````````````````````````````````````````````/;@@@@@@@@@@@@@@@/;/;;;;;@@//;@@@@;;@@;;````````````````````````````````````````````" +
                "```````````````````````````````````````````/;;;/;//////;//;/;;;;//;;///;//@@@@/;@@@;````````````````````````````````````````````" +
                "```````````````````````````````````````````/;//;/;@@@@/;;;/;;;;//;///;;;;;;;///@@@@@/```````````````````````````````````````````" +
                "``````````````````````````````````````````/@@@@@@@@@@;/;;;/;;;;;/;;////;;;/;;;;;;@@@//``````````````````````````````````````````" +
                "`````````````````````````````````````````/@@@@@@;//;/;/;;@@@/;;@@@;/;@@@@@/;;;;/;//@;;``````````````````````````````````````````" +
                "`````````````````````````````````````````@@@//;;;;;;@;/;/@@@;;;@@;/;;@@@@@///@@@;;;/@;/`````````````````````````````````````````" +
                "````````````````````````````````````````/@@/;/;@@@@@@@////;;/;;/;;;;;//;;;//@@@@@;;/@@/`````````````````````````````````````````" +
                "```````````````````````````````````````/;@@@@@@@@@@;//;;;/;;/;;;;//;;;;;/;;;@;/;@;;;@@@/````````````````````````````````````````" +
                "```````````````````````````````````````/@@@@@@@/;;//@@@@@@@;@@@@@@/;;;/;;;@@/;;;/@@@@@@;````````````````````````````````````````" +
                "``````````````````````````````````````/@@@;/@;//;@@@@@@@@@@@@@@@@@@@@@@@@@@@/;;;;@@@@@@@;```````````````````````````````````````" +
                "``````````````````````````````````````;@/;@@;/;@@@@@@@@@@;;@@@@@@;///;@@@@@@@;;;@@@/;;@@//``````````````````````````````````````" +
                "`````````````````````````````````````/;@@@@;/@@@@@@@@@@;;@@@@@;;;@@@@@@@@@@@@@@@@@@@;/;@@;``````````````````````````````````````" +
                "````````````````````````````````````;//@@@;;@@@@@@@@;/;;@@@@;/;@@@@@@@@@@@@@@@@@@@@@@@/;;;/`````````````````````````````````````" +
                "````````````````````````````````````;@@;;/@@@@@@@@;///;;@;//;/@@@@;;/;;@@@@@@@@@@@@@@@;//@;`````````````````````````````````````" +
                "```````````````````````````````````/@@@@@@@@@@@@//;@@/;;/;;;;;;/;/;/;;@@@@@@@;;//;//@@@;@@;/````````````````````````````````````" +
                "``````````````````````````````````/;@@@@@@@@@;;;/;;;;;;;;;;;;/;;;;///@@;/;;;;//@@@@@@@@//@@/````````````````````````````````````" +
                "``````````````````````````````````/@@@@@@@@@/;;@;;/;/;;@;;;;;;/;;/;/@@//;;;;;/@@@@@@/;//@@@@/```````````````````````````````````" +
                "`````````````````````````````````/@@@@@@@@@@;;@@/;;;/;;;;;;;;@;;//;@@/;;;;;;;@@;/@@@@@@@@@@@@```````````````````````````````````" +
                "`````````````````````````````````;@@@@@//;/;/@@@;;;;/;;//;;;////;@@@@/;///;@@@@/;;/@@@@;//@@@/``````````````````````````````````" +
                "````````````````````````````````/@;/@@@@@;;;;@;;;;/;/@@@@@@@@@@@@@@@@@;/;@@@//;;/;/@@;//@@@@@;``````````````````````````````````" +
                "```````````````````````````````/@@//@@@@@@;@@//;;@@@@@@@@;;/@@@@;;;;@@@@@@@@;;/@@@@@@/;;@@@@@@/`````````````````````````````````" +
                "```````````````````````````````@@@@@@//@@@@@@@@@@@@@@@@;;;;;@@@/;;@;//@@@@@@@//@@@@;/;;;;@@@@@//````````````````````````````````" +
                "``````````````````````````````;@@@@@@@@@@@@@@@@@;/;;/;;;;/;@@;;///@@@@@@@@@@@@@@@/;/;;@@@@@/;@@/````````````````````````````````" +
                "`````````````````````````````//;;@@@@@@@/;@@;;;;@@;;;/;;;;;;;//;/;;;;@@@@@@@@@@@@;;;;@@@@@;;@@@;/```````````````````````````````" +
                "`````````````````````````````;@@@@@;@@@@@@;;;;;/;@///;;;;;;;;;;/;;;/;;/;/;@@@@///@@@@@//@@@@@@@@/```````````````````````````````" +
                "````````````````````````````/;@@@@@//@@@@//@@/;//;;;;;;;;;;;;;;;;;;/;/;;;;;/@@@@/@@@@/;;@@@@@@@@//``````````````````````````````" +
                "```````````````````````````///;@@@@@@@@;;/;@@/;;;;;;;;;;;;;;;;;;;/;@@@;/;;//;/@@@/@@@;;;@@@@@@@@@/``````````````````````````````" +
                "```````````````````````````/;@;@@@@@@@/;/;@/;;;/;;;//;//////////;;;@@;;/;/;@@;//;;/@@@@@@@@@@@@@@@;`````````````````````````````" +
                "``````````````````````````//@@@@@@@@@;;@@;/;;;;;;/;@@@@@@@@@@@@@@@@@@@@;;;;@@@@///;@@@@@//@@@@@@@@@`````````````````````````````" +
                "``````````````````````````;@@@@@@@@@@/;;;;/;;;;@@@@@@@@@@@@@@@@@@@@@@@@@@@;;/@@@@/;;@@@@@@@@@@@@@@@/````````````````````````````" +
                "`````````````````````````/@@;/;@@@@@@/;/;;;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;/;;@@@;;;@@@@@@@;;@@@@@@/```````````````````````````" +
                "````````````````````````;@@@/@@@@///;;/;@@@@@@@@@@@@@@@@@;//;@@@@@@@@@@@@@@@@;;/;@@@;/@@@@@/;;/@@@@@;```````````````````````````" +
                "````````````````````````@@@@@@@@/;/;/;@@@@@@@@@@@@@@;///;//@@@@@@@@@;@@@@@@@@@@@/;;@@//;@@@;//@@@@@@@/``````````````````````````" +
                "```````````````````````/@@@@/;;;;;@@@@@@@@@@@@@@@@@;;;;;/;@@@@@@@@@@/@@@@@@@@@@@@/;;@@@//@@@/;@@@@@@@/``````````````````````````" +
                "``````````````````````/@@@@@;/;;;@@@@@@@@@@@@;/@@@@/;;;;/;@@@@@@@@@@/@@@@@@//;@@@@@;;;@@;/@@@;/@@@@@@@/`````````````````````````" +
                "``````````````````````@@@@;;;;;;;@;@@@@@@/@@@/@@@@@;;;;;;/;@@@@@@@@@/@@@@@@@//;;@@@@;;;@@@;@@@@@@@@@@@@`````````````````````````" +
                "`````````````````````;@@@@;;;;//@@@@@@@@@/@@@@@@@@@@;;;;;;/@@@@@@@@@;@@@@@@/@@@//@@@@;;/@@@@@@@@@@@@@@@;````````````````````````" +
                "`````````````````````@@@@@@//;@@@@@@@@@@@;;@@@;@@@@@//;/;/@@@@@@@@@;@@@@@@@/;@@;;;@@@@@/;@@@@@@@@@@@@@@@````````````````````````" +
                "````````````````````/@@@@//;@@@@@@@@@@@@@;/;@@/@@@@@@;//;;@@@@@@@@@/@@@@@@;;;@@@;/@@@@@@;/;@@;//@@@@;;/@/```````````````````````" +
                "```````````````````/@@@;///@@@@@@@@@@@/@@@;;@@@/@@@;@@@;@@@@@@@@@@;/@@@@@@;/;@@;;@@@@@@@@@//@@@;/;@/;/;@@/``````````````````````" +
                "```````````````````;@@@/;;@@@@@@@@@;@@/;@@/;;@@;/@@;/@@@@@@@@@@@@@/@@@@@@@/;;@@;/@@@@@@@@@@;@@@@;;/;@@@@@;``````````````````````" +
                "``````````````````/@@@@;;/@@@@@@@@@/@@;/@@@;;;@@@/@@@;/@@@@@@@@/;/;@@@@@@;;;/@;;/@@@@@@@@@;///;/;;;@@@@@@@/`````````````````````" +
                "`````````````````/;;@@@;;;@@@@@@@@@@;;/;/@@/;;/@@@;/@@;////;//;/;;@@@@@@@/;;@@;;/@@@@@@@@;//@@;;;@@@;@@@@@/`````````````````````" +
                "`````````````````/@@/;@@//@@@@@@@@@@@@@;/@@;/;;/@@@@/;;@@;;@@;/;@@@@@@@@;;/@@;;/@@@@@@@;/;@@@;;@@@@@//;/;;/;````````````````````" +
                "````````````````/;@@/;@@@;;@@@@@@@@@@@@@/;@@;;@@@/@@@@@@@;/@@@@@@@@@@@@@/;@@;;;/@@@@@@/;;@@@/;@@@@@@@;///@@;````````````````````" +
                "```````````````//@@@;//@@@;;/;/;;@@@@@@@;/@@//;@@@@@@@@@@@;@@@@@@@@@@@/;;@@;;//@@@@@;/;/@@@/;@@@;/;@@@@@@@@@@```````````````````" +
                "```````````````/@@@/;;;/@@@@;;;;;;/@@@@@@;;@@;;;/@@@@@@@@@@@@@@@@@@@@/;/;@@/;/@@@@//;@@@@;/@@@/;;/;/;@@@@@;@@```````````````````" +
                "``````````````//@@@/;;;;;/@@@;/;@;/;;@@@@;;/@;/;;/;@@@@@@@@@@@@@@@@;;;;;@@/;;@@;;//;@@@@@@@@@/;@@@;;//;@@@@;@@``````````````````" +
                "``````````````/@@@@@////;;/@;;//@@///;@@/;/;@@/;;;//;@@@@@@@@@@@@;;/;;;@@@;;;@;//;@@@@@@@@@@@/;@@@@;/;;/;//@@@/`````````````````" +
                "`````````````/@@/;@@@@@@@@@/;;/;//;;;;;;;;@@;/@@;;;;;;/////////;;;;;;/;@@;;/;;;/@@@@//@@;@@@@;;;/;@@@;;;;/@@@@@`````````````````" +
                "````````````/;@;//;;@@@@@@;/;;//;/;;//;;;///;;/@@;;;;;;;;;;;;;;;;;;;;;;;;;;///@@@@@@;@@@//@@@/////@@@@@@@@@@@@@;````````````````" +
                "````````````;@@/;;/;/@@@//;;;@@;;;/;;;;;;;/;;/;/;;/;;;;;;;;;/;;;/;;;;;;;/@@@@@;;@@@@@@@@@@@;;/;;/@@@@@@@@@@//;@@````````````````" +
                "```````````/@@@@@;;;/@@@/;//;/;;;/@@@;;;;;/;///;///;;/;;;;;;;/;/;//;;;@@@@@@@@///;//;///;;//@//;@@@//;/@@@@;;;;@@```````````````" +
                "``````````/;@@@@@@//@@@@;;;//;;;;/;@@/;;;;;;;@@@@@@@@@@@;;;/;@@@@@@@@@@@;;//@@@;;;;;;;/;;/;@@@@;@/@/;;/;/@@@//;@@```````````````" +
                "``````````/@@//;@@;;@@;/;/@@;;;/;;;;///;;;;;;;/;;/;@@@@@@@@@@@@@@@;/;;/;/;@@@;;;;;;;@@@/;;/;;@@@@/;@@;/;/@@@@@@@@@``````````````" +
                "`````````/@@///;;@@////;;;;//;@@@///;;;;;;;;;@@/;;/;;;;//;@@@;;@@//;;;@/;;;/;///;@@@@@;;;;;;;;;@@//;/;/@@@@@@@@@@@``````````````" +
                "`````````;@@@@@@@@@@;;;;;;;;;;@@@/;/@;;;;;;;;@;;;;;;//@@;;/@;;;;@@/;;;;;///;@@@@@@@@;;;;;;;//;@@@@@@@@@@@@@@@@@@@/;`````````````" +
                "````````/@@@@@@@@@@@@@@;///;;;;;///;@@;;;;;;/;;;;;;;;/;@;;;;;;;;;;;;;/;;@@@@@@@@@///;;;/;;@@@@@@@@@@@@@////;//;@@@/`````````````" +
                "```````/@@@;/;;;@@@@@@@@@@@/;;;;;;;;@;//@@@@@@@;;;;;;;;;;;;;;;;;;;;@@@@@@@@;/;;/;/;;@@@@@@@@@@;;;//;;@@@;/;;;;;;/;;/````````````" +
                "```````/@@/;/;@@/;;;//@@@@;;/;;/;;;;/;;///;;@@@@@@@@@@@@@@@@@@@@@@@@@@;;;;//;;;@@@@@@@@@@@@@@@/;;;;/;;@@@@;///;;@@@@/```````````" +
                "``````/@@@@;//;@@;//;/;@@@//;@@@@/;///;/;/;;;/;/;/;;;/;/;;//;;;;;/;;;/;;;/;@@@@@@@@@;/;;;;;;@@@;;;;;;/@@@@@@@@@@@@@@/```````````" +
                "`````/;@@@@@@@@@@@//;;;;@@///;//;@@@@@@@@@@;;;////;;;////////;//;;@@;;@@@@@@@@@@;;;;;;/;;;;/;@@@@@@;@@@@@@@@@@@;/;/;/;``````````" +
                "`````;/@@@@@@@@@@@@@@@@@/;;;;;;;;;/;@;/;/@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;;/;///;/;/;;;;;;/;;@@@@@@@@@@@@;@@@@@@@/;;;/;@``````````" +
                "````;;//@@@;//;;;@@@@@@@;;;;;;/;;;/;;//;;;/////;;;;;@@@@@@@@@;;;//;/;;;;;;;;;;;;//;;;;/@@@@@@;/;;;@@@@@/;;;;//;;;;//@@@`````````" +
                "```/;;@@@@@/;/;;;/;@@@@//;;@@@;;;;;;;;;;;/;;@/;;;;;;;;//;;;;;;;/;;;///;;///@@;/;@@@@/;;@@@@@//;;;;//;@@@@///@@@/@@@@@@@`````````" +
                "```/;@@@@@@@;;;;;;;/@@@;//;@;;;@@@@/;/;;;;;;/;;/;;;;;;;@/;;/;@@;;;;@@@;;;@@@@;;;@@@;;///;//@/;;/;;//;@@@@@;/@@@;@@@@@@@;````````" +
                "``//@@@/;/@@@@@/;;;@@@@;;;;;;;;;;@@/;;;@//;;;;;;;;/;;;@@/;;;;;;;;;/@@;;/;/@;/;/;/;;/////;;/@@@//@@@@@;;;@@@@@@@;/;;@@@;;````````" +
                "``/@@@@;;;/@@@@@//@@@;/@@;;/////;;;/;;@@@;/;;;;/;;;;;;;/;;;;;;/;;/;;;;;;;;;/;;;////;@@/;;;@@@@;;@@@@;;;;;/@@@;;;;@@@@@@@@```````" +
                "`/@@@@@/@@@/;;@@;;/;/;//@@@@@@@@@@@@@@;;///@@@/;;;/@//;;@@/;;@//;;;;;/@@;;;;@@@@;;;@@@;;;@@@;/;;;/;;;;;;;;@@;;/;@@@@@@@@;/``````" +
                ";;;@@@@;@@@/;;/@@;;/;;;;;;;;/;@@/;/;@;;;;;/;@@/;;;;;;;/;;/;;;@//;;;;;;@@;;;;@@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;//``````" +
                "````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````" +
                "````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````";

        newMachine("bfi.ijvm", program);
        vm.run();
        assertEquals("MoarTests", vmOutput.toString());
    }

    @Test(timeout = 10000)
    public void testQuine() {
        /*
         * This idea is based of a brainfuck quine
         * https://en.wikipedia.org/wiki/Quine_(computing)
         *
         * TL;DR a quine prints its own code byte by byte
         */
        String quine = "->++>+++>+>+>+++>>>>>>>>>>>>>>>>>>>>>>+>+>++>+++>+++>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+>++" +
                ">>>+++>>>>+++>>>+++>+>>>>>>>++>+++>+++>+>>+++>+++>+>+++>+>+++>+>++>+++>>>+>+>+>+>++>+++>+>+>>+++>>>>" +
                ">>>+>+>>>+>+>++>+++>+++>+>>+++>+++>+>+++>+>++>+++>+>+>++>+++>+>+>>+++>>>+++>+>>>++>+++>+++>+>>+++>>>" +
                "+++>+>+++>+>++>>>+++>>+++>>+[[->>+[>]+>+[<]<]>>[>]<+<+++[<]<<+]>>>[>]+++>+[+[-<++++++++++++++++>]<++" +
                "++++++++.<]";

        newMachine("bfi.ijvm", quine);

        vm.run();
        assertEquals(quine, vmOutput.toString());
    }
}
